#include <catch2/catch.hpp>

#include <amplifier.h>
using namespace AdventOfCode;

TEST_CASE("Thrust example 1") {
  Program program{3,  15, 3,  16, 1002, 16, 10, 16, 1,
                  16, 15, 15, 4,  15,   99, 0,  0};
  int expected = 43210;

  REQUIRE(AmplifierChain::maxThrusterSignal(program) == expected);
}

TEST_CASE("Thrust example 2") {
  Program program{3, 23, 3,  24, 1002, 24, 10, 24, 1002, 23, -1, 23, 101,
                  5, 23, 23, 1,  24,   23, 23, 4,  23,   99, 0,  0};
  int expected = 54321;

  REQUIRE(AmplifierChain::maxThrusterSignal(program) == expected);
}

TEST_CASE("Thrust example 3") {
  Program program{3,    31, 3,  32, 1002, 32, 10, 32, 1001, 31, -2, 31,
                  1007, 31, 0,  33, 1002, 33, 7,  33, 1,    33, 31, 31,
                  1,    32, 31, 31, 4,    31, 99, 0,  0,    0};
  int expected = 65210;

  REQUIRE(AmplifierChain::maxThrusterSignal(program) == expected);
}

TEST_CASE("AOC7") {
  Program program{
      3,    8,    1001, 8,    10,   8,    105,  1,    0,     0,    21,   38,
      63,   72,   85,   110,  191,  272,  353,  434,  99999, 3,    9,    102,
      4,    9,    9,    101,  2,    9,    9,    102,  3,     9,    9,    4,
      9,    99,   3,    9,    1001, 9,    4,    9,    102,   2,    9,    9,
      1001, 9,    5,    9,    1002, 9,    5,    9,    101,   3,    9,    9,
      4,    9,    99,   3,    9,    1001, 9,    2,    9,     4,    9,    99,
      3,    9,    1001, 9,    3,    9,    102,  2,    9,     9,    4,    9,
      99,   3,    9,    101,  2,    9,    9,    102,  2,     9,    9,    1001,
      9,    2,    9,    1002, 9,    4,    9,    101,  2,     9,    9,    4,
      9,    99,   3,    9,    1002, 9,    2,    9,    4,     9,    3,    9,
      102,  2,    9,    9,    4,    9,    3,    9,    101,   2,    9,    9,
      4,    9,    3,    9,    101,  2,    9,    9,    4,     9,    3,    9,
      101,  1,    9,    9,    4,    9,    3,    9,    101,   2,    9,    9,
      4,    9,    3,    9,    1002, 9,    2,    9,    4,     9,    3,    9,
      101,  2,    9,    9,    4,    9,    3,    9,    101,   1,    9,    9,
      4,    9,    3,    9,    1002, 9,    2,    9,    4,     9,    99,   3,
      9,    1001, 9,    1,    9,    4,    9,    3,    9,     102,  2,    9,
      9,    4,    9,    3,    9,    1001, 9,    2,    9,     4,    9,    3,
      9,    102,  2,    9,    9,    4,    9,    3,    9,     1001, 9,    2,
      9,    4,    9,    3,    9,    101,  2,    9,    9,     4,    9,    3,
      9,    1002, 9,    2,    9,    4,    9,    3,    9,     1001, 9,    2,
      9,    4,    9,    3,    9,    1001, 9,    2,    9,     4,    9,    3,
      9,    1001, 9,    1,    9,    4,    9,    99,   3,     9,    1001, 9,
      1,    9,    4,    9,    3,    9,    1001, 9,    1,     9,    4,    9,
      3,    9,    1001, 9,    2,    9,    4,    9,    3,     9,    102,  2,
      9,    9,    4,    9,    3,    9,    1002, 9,    2,     9,    4,    9,
      3,    9,    102,  2,    9,    9,    4,    9,    3,     9,    1002, 9,
      2,    9,    4,    9,    3,    9,    1002, 9,    2,     9,    4,    9,
      3,    9,    101,  2,    9,    9,    4,    9,    3,     9,    101,  2,
      9,    9,    4,    9,    99,   3,    9,    1001, 9,     2,    9,    4,
      9,    3,    9,    1002, 9,    2,    9,    4,    9,     3,    9,    101,
      1,    9,    9,    4,    9,    3,    9,    102,  2,     9,    9,    4,
      9,    3,    9,    1001, 9,    2,    9,    4,    9,     3,    9,    1002,
      9,    2,    9,    4,    9,    3,    9,    102,  2,     9,    9,    4,
      9,    3,    9,    1001, 9,    2,    9,    4,    9,     3,    9,    1002,
      9,    2,    9,    4,    9,    3,    9,    102,  2,     9,    9,    4,
      9,    99,   3,    9,    1002, 9,    2,    9,    4,     9,    3,    9,
      101,  1,    9,    9,    4,    9,    3,    9,    101,   2,    9,    9,
      4,    9,    3,    9,    101,  1,    9,    9,    4,     9,    3,    9,
      101,  2,    9,    9,    4,    9,    3,    9,    102,   2,    9,    9,
      4,    9,    3,    9,    101,  2,    9,    9,    4,     9,    3,    9,
      1002, 9,    2,    9,    4,    9,    3,    9,    1002,  9,    2,    9,
      4,    9,    3,    9,    101,  2,    9,    9,    4,     9,    99};
  int expected = 17790;

  REQUIRE(AmplifierChain::maxThrusterSignal(program) == expected);
}

TEST_CASE("Feedback Loop 1") {
  Program program{3,  26, 1001, 26, -4, 26, 3, 27, 1002, 27,
                  2,  27, 1,    27, 26, 27, 4, 27, 1001, 28,
                  -1, 28, 1005, 28, 6,  99, 0, 0,  5};
  int expected = 139629729;

  FeedbackLoop loop (program);

  REQUIRE(loop.maxOutputSignal () == expected);
}